//
// Cover image
// --------------------------------------------------

.cover-image {
  box-sizing: content-box;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  position: relative;
  contain: content;

  .tag-colors {
    position: absolute;
    right: $space-min;
    bottom: $space-min;

    .icon-circle,
    .icon-crescent-circle {
      @if $theme == "light" {
        @each $key, $val in $tag-color-shades {
          &.#{$key} {
            .color {
              color: map-get($val, "color-base");
            }

            .border {
              color: $colors-focus-border-grid;
            }
          }
        }
      } @else {
        @each $key, $val in $tag-color-shades {
          &.#{$key} {
            .color {
              color: map-get($val, "color-dark");
            }

            .border {
              color: $colors-focus-border-grid;
            }
          }
        }
      }
    }
  }
}

.stack-lines {
  flex: 0 0 auto;
  width: 100%;

  .line {
    background: $stack-color;
    position: relative;
  }
}

.item-grid {
  .stack-lines {
    background: $stack-bg;

    .line {
      overflow: hidden; // Prevent rendering bug on high-density displays

      &::before,
      &::after {
        content: "";
        position: absolute;
        left: -1px; // …
        right: -1px; // …
      }

      &::before {
        top: -1px; // …
        bottom: -1px; // …
        background: $stack-line-tint-color;
        opacity: 0;
      }

      &::after {
        top: 100%;
        height: 1px;
        box-shadow: 0 -1px 0 $stack-line-gap-color;

        @if $theme == "light" {
          @media (2dppx <= resolution) {
            box-shadow: 0 -0.5px 0 $stack-line-gap-color;
          }
        }
      }
    }
  }

  @each $size in $tile-thumbnail-sizes {
    &[data-size="#{$size}"] {
      .cover-image {
        .thumbnail,
        .thumbnail img {
          min-width: #{round($size * 0.375)}px;
          min-height: #{round($size * 0.375)}px;
        }

        .thumbnail {
          [class*="90"],
          [class*="270"] {
            img {
              min-height: round($size * 0.375) * 1px + 0.5px;
            }
          }
        }

        .stack-lines {
          .line {

            // Stack line height
            height: #{round(calc($size / 32))}px;

            // Stack line widths
            @for $i from 1 through $stack-size-max {
              &.line-#{$i} {
                margin-left: #{round(calc($size * $i / 16))}px;
                margin-right: #{round(calc($size * $i / 16))}px;
              }
            }

            // Tinting and gap
            $tint-opacity: $stack-line-tint-opacity;
            $gap-opacity: 0;
            $range: $tile-thumbnail-size-max - $tile-thumbnail-size-min;

            @if ($size - $tile-thumbnail-size-min) < calc($range / 2.25) {
              $tint-opacity: calc(
                $stack-line-tint-opacity
                * (($size - $tile-thumbnail-size-min)
                * 2.25 / $range)
              );

              $gap-opacity: calc(1 - ($size - $tile-thumbnail-size-min) * 2.25 / $range);
            }

            &.line-1 {
              &::before {
                opacity: $tint-opacity;
              }
            }

            &.line-2 {
              &::before {
                opacity: $tint-opacity + $tint-opacity * 0.5;
              }
            }

            &::after {
              opacity: $gap-opacity;
            }
          }

          & + .thumbnail,
          & + .thumbnail img {
            --size: #{$size};
            --stack-lines-height: 2 * #{round(calc($size / 32))}px;
            --stack-height: var(--size) * 1px - var(--stack-lines-height);
            --width: var(--x) * var(--size) * 1px;
            --height: var(--y) * var(--size) * 1px;
            --max-width: var(--width) + (var(--stack-height) - var(--height)) * (var(--x) / var(--y));
            --max-height: var(--stack-height);
            width: calc(var(--width));
            height: calc(var(--height));
            max-width: calc(var(--max-width));
            max-height: calc(var(--max-height));
          }

          & + .thumbnail {
            [class*="90"],
            [class*="270"] {
              img {
                --width: var(--y) * var(--size) * 1px + 0.5px;
                --height: var(--x) * var(--size) * 1px;
                --max-width: var(--stack-height);
                --max-height: var(--height) + (var(--stack-height) - var(--width)) * (var(--x) / var(--y)) + 0.5px;
              }
            }
          }
        }
      }
    }
  }
}

.item-table {
  .cover-image-container {
    display: flex;
    justify-content: center;
    align-items: center;
    width: $thumbnail-size;
    height: $thumbnail-size;
    margin-right: $space-xs;
  }

  .cover-image {
    .stack-lines {
      .line {
        height: 1px;
        border: 0;
        margin-bottom: 1px;
      }

      @for $i from 1 through $stack-size-max {
        .line-#{$i} {
          margin-left: $i * 2px;
          margin-right: $i * 2px;
        }
      }

      & + .thumbnail,
      & + .thumbnail img {
        max-height: $thumbnail-size - $space-min;
      }
    }

    .thumbnail,
    img {
      --width: var(--x) * #{$thumbnail-size};
      --height: var(--y) * #{$thumbnail-size};
      width: calc(var(--width));
      height: calc(var(--height));
      min-width: $space-sm;
      min-height: $space-sm;
    }

    .thumbnail {
      [class*="90"],
      [class*="270"] {
        img {
          --width: var(--y) * #{$thumbnail-size};
          --height: var(--x) * #{$thumbnail-size};
        }
      }
    }
  }

  .scroll-container:focus {
    .active {
      .cover-image {
        .line {
          background: $stack-focus-color;
        }
      }
    }
  }
}
