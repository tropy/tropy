@use "../abstracts/config" as *;

//
// Slider
// --------------------------------------------------

.slider {
  display: flex;
  align-items: center;
  width: zoom($slider-width + 2px); // Work around containment
  height: zoom($slider-height);
  margin-left: zoom(-1px);
  margin-right: zoom(-1px);
  padding: 0 zoom(1px);
  contain: strict;

  .draggable {
    flex: 1 1 auto;
    display: flex;
    align-items: center;
    height: zoom($slider-handle-size + 2px);
    -webkit-app-region: no-drag;
  }

  .btn {
    flex: 0 0 auto;

    &:hover,
    &.active {
      background-color: $btn-icon-bg;
    }

    &.active {
      opacity: $btn-disabled-opacity;
      pointer-events: none; // Simpler than icon color reset
      // Icon overlay colors are defined by the toolbar
    }
  }

  .slider-track {
    flex: 1 1 0;
    height: zoom($slider-track-height);
    background-color: $slider-track-bg;
    border-radius: zoom(calc($slider-track-height / 2));
    margin: 0 zoom($space-min - $shim);
    position: relative;
    border-left: zoom(calc($slider-handle-size / 2)) solid transparent;
    border-right: zoom(calc($slider-handle-size / 2)) solid transparent;

    &:only-child {
      margin: 0;
    }
  }

  .slider-range {
    box-sizing: content-box;
    background-color: $slider-range-bg;
    height: zoom($slider-track-height);
    border-radius: zoom(calc($slider-track-height / 2));
    border-left: zoom(calc($slider-handle-size / 2)) solid transparent;
    border-right: zoom(calc($slider-handle-size / 2)) solid transparent;
    margin-left: zoom(calc($slider-handle-size * -1 / 2));
    position: absolute;

    .slider.origin :is(&) {
      border-radius: 0;
      border-left: 0;
      border-right: 0;
      margin-left: 0;
    }

    .slider:focus :is(&) {
      background-color: $slider-focus-bg;
    }

    .slider.disabled :is(&) {
      opacity: $slider-range-disabled-opacity;
    }
  }

  .slider-handle {
    box-sizing: content-box;
    width: zoom($slider-handle-size);
    height: zoom($slider-handle-size);
    background-color: $slider-handle-bg;
    background-clip: content-box;
    border: zoom(1px) solid $slider-handle-border;
    border-radius: 50%;
    position: absolute;
    top: zoom(calc(-1 * ($slider-handle-size / 2 + 1px - $slider-track-height / 2)));
    margin-left: zoom(calc(-1 * ($slider-handle-size / 2 + 1px)));

    .slider:focus :is(&) {
      background-color: $slider-focus-bg;
      border-color: transparent;
    }

    .slider.disabled :is(&) {
      background-color: $slider-handle-disabled-bg;
    }
  }

  .slider-value {
    position: absolute;
    left: 50%;
    bottom: 100%;
    width: zoom(32px);        // Use fixed width in order to work around buggy
    margin-left: zoom(-16px); // antialiasing (translateX + transition).
    font-size: zoom(10px);
    text-align: center;
    line-height: zoom(calc($toolbar-height / 2 - $slider-handle-size / 2));
    color: $slider-value-color;
    opacity: 0;
    transition: opacity $slider-value-transition;
    -webkit-app-region: no-drag;

    .slider:hover :is(&),
    .slider-handle:active :is(&) {
      opacity: 1;
    }
  }

  // Small slider
  &.slider-sm {
    width: $slider-width-sm + 2px; // Work around containment

    .slider-track {
      border-left-width: calc($slider-handle-size-sm / 2);
      border-right-width: calc($slider-handle-size-sm / 2);
    }

    .slider-range {
      border-left-width: calc($slider-handle-size-sm / 2);
      border-right-width: calc($slider-handle-size-sm / 2);
      margin-left: calc($slider-handle-size-sm * -1 / 2);
    }

    .slider-handle {
      width: $slider-handle-size-sm;
      height: $slider-handle-size-sm;
      top: calc(-1 * ($slider-handle-size-sm / 2 + 1px - $slider-track-height / 2));
      margin-left: calc(-1 * ($slider-handle-size-sm / 2 + 1px));
    }

    .slider-value {
      display: none;
    }
  }
}
