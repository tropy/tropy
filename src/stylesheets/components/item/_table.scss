//
// Item table
// --------------------------------------------------

.item-table {
  flex: 1 1 auto;
  display: flex;
  flex-direction: column;
  position: relative;
  height: 100%; // Prevent vertical scrollbar du to horizontal scrollbar
  overflow-x: auto;
  contain: strict;

  th,
  td {
    padding: 0;
    position: relative;

    &:last-child {
      .th-container,
      .td-container {
        padding-right: $space-sm;
      }
    }

    &[class*="integer"] {
      text-align: right;
    }
  }

  .table-head {
    width: 100%;
    table-layout: fixed;
    border-collapse: separate;
    border-spacing: 0;
    color: $item-table-header-color;

    .scrollbar-style-old-school & {
      width: calc(100% - #{$default-padding-horizontal});
    }

    th {
      display: table-cell; // Reset resizable
      text-align: justify;
      font-weight: 400;
      height: $item-table-header-height;
      border: {
        top: 1px solid $item-table-header-border-color;
        bottom: 1px solid $item-table-header-border-color;
      }
      padding: 0 $space-min; // Prevent overlap of th-container and resize handle
      position: relative;
      background-image:
        linear-gradient(to right, transparent 1px, $body-bg 1px),
        linear-gradient(
          to bottom,
          $body-bg 2px,
          $item-table-header-border-color 2px,
          $item-table-header-border-color ($item-table-header-height - 4px),
          $body-bg ($item-table-header-height - 4px)
        );
      contain: layout style; // Not clear why size shifts the content

      &:first-child {
        background-image: none;

        .th-container {
          padding-left: $space-sm;
        }
      }

      &:active:not(.resizing):not(.blank):not(.dragging) {
        background:
          linear-gradient(
            to right,
            transparent 1px,
            $item-table-header-active-bg 1px
          )
          $item-table-header-border-color;

        &:first-child {
          background: $item-table-header-active-bg;
        }

        & + th {
          background:
            linear-gradient(
              to right,
              transparent 1px,
              $body-bg 1px
            )
            $item-table-header-border-color;
        }
      }

      &[class*="integer"] {
        .label {
          padding-left: $space-min;
          padding-right: 0;
        }

        .icon {
          order: -1;
        }
      }

      &.ascending,
      &.descending {
        color: $item-table-header-sort-color;

        .icon {
          display: block;
        }
      }

      &.descending {
        .icon {
          transform: scaleY(-1);
        }
      }

      &.dragging {
        .th-container {
          visibility: hidden;
        }
      }

      .th-container {
        display: flex;
        width: 100%;
        height: 100%;
        justify-content: space-between;
        align-items: center;
        padding: 0 $space-min 0 ($space-min + 1px);
      }

      .label {
        @include css-truncation;
        flex: 1 1 auto;
        padding-right: $space-min;
      }

      .icon {
        display: none;
        margin: 0 -4px 0 -5px;
      }
    }
  }

  .table-body {
    flex: 1 1 auto;
    position: relative;
    height: 100%; // Prevent vertical scrollbar due to horizontal scrollbar
    display: flex; // Prevent overflow
    contain: strict;

    &.over {
      @extend %drop-target;
    }
  }

  .scroll-container {
    background-image: repeating-linear-gradient(to bottom,
      $items-odd-bg $space-min, $items-odd-bg ($row-height + $space-min),
      transparent ($row-height + $space-min),
      transparent (2 * $row-height + $space-min));
    background-attachment: local;
    padding-top: $space-min;
    position: relative;
    z-index: 0; // Fix stacking context (overlay toolbar covered by active item)
    height: 100%; // Prevent vertical scrollbar du to horizontal scrollbar
  }

  .runway {
    contain: strict;
    min-height: 100%; // Needs some flex row parent to work
  }

  .viewport {
    width: 100%;
    table-layout: fixed;
    border-collapse: collapse;
    contain: content;
    will-change: transform;
  }

  .item {
    contain: layout size style;

    td {
      height: $row-height;
    }

    .td-container {
      padding: 0 $space-xs 0 ($space-xs + 1px);
    }

    &.active {
      td {
        color: $items-active-color;
        background: $items-active-bg;

        @at-root #{
          selector-replace(&, ".item-table",
            ".item-table .scroll-container:focus")
        } {
          color: $items-focus-color;
          background: $items-focus-bg;

          .icon-circle,
          .icon-crescentcircle {
            .border {
              color: $colors-focus-border-table;
            }
          }
        }
      }
    }

    &.over {
      td {
        @extend %drop-target;
      }
    }

    .main-column {
      .td-container {
        padding-left:
          $default-padding-horizontal
          + $thumbnail-size
          + $padding-base-horizontal;
      }
    }
  }

  .tag-colors {
    margin-left: $space-xs;
    flex: 0 0 auto;

    .icon-circle,
    .icon-crescentcircle {
      @if $theme == "light" {
        @each $key, $val in $tag-colors {
          &.#{$key} {
            .color {
              color: map-get($val, "color-base");
            }

            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      } @else {
        @each $key, $val in $tag-colors {
          &.#{$key} {
            .color,
            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      }
    }
  }
}
