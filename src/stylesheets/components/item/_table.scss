//
// Item table
// --------------------------------------------------

.item-table {
  flex: 1 1 auto;
  // Do not use display: flex to stretch the table-head to the same width of the table-body (with horizontal overflow in item-table)
  // Flexbox plus contain: strict (layout) also breaks the header width after column resize/order
  position: relative;
  height: 100%; // Prevent vertical scrollbar due to horizontal scrollbar
  overflow-x: hidden;
  overflow-y: hidden; // Prevent horizontal scrollbar due to column borders
  overscroll-behavior: contain;
  contain: strict;

  .metadata-head,
  .td {
    padding: 0;
    position: relative;
  }

  &.dragging-column {
    .metadata-head,
    .td {
      transition: transform $column-transition;

      &.dragging {
        z-index: $zindex-drag-layer;
        transform: translateX(var(--drag-offset));
        transition: none;
      }
    }

    .resizable-handle-col {
      display: none;
    }
  }

  .table-head,
  .runway {
    min-width: var(--item-min-width);
  }

  .table-head {
    display: grid;
    grid-template-columns: var(--item-template-columns);
    color: $item-table-header-color;
    height: $item-table-header-height;
    border: {
      top: 1px solid $item-table-header-border-color;
      bottom: 1px solid $item-table-header-border-color;
    }
    overflow: hidden;

    .scrollbar-style-old-school & {
      width: calc(100% - #{$default-padding-horizontal});
    }

    @include state(".item-table.dragging-column") {
      overflow: visible;
    }

    .metadata-head {
      text-align: justify;
      font-weight: 400;
      padding: 0 $space-min; // Prevent overlap of th-container and resize handle
      position: relative;
      background-color: $item-table-header-bg;
      contain: layout style; // Not clear why size shifts the content

      &::before,
      &::after {
        content: "";
        position: absolute;
        top: 2px;
        bottom: 2px;
        width: 1px;
        background-color: $item-table-header-border-color;
      }

      &::before {
        left: 0;
      }

      &::after {
        background-color: transparent;
        right: 0;
        box-shadow: 1px 0 $item-table-header-border-color;
      }

      &:first-child {
        &::before {
          content: none;
        }
      }

      &.ascending,
      &.descending {
        color: $item-table-header-sort-color;
      }

      &:active:not(.resizing):not(.dragging) {
        background-color: $item-table-header-active-bg;

        &::before,
        &::after {
          top: 0;
          bottom: 0;
        }

        &:first-child {
          background: $item-table-header-active-bg;
        }
      }

      &.moving {
        transform: translateX(var(--drop-offset));
        z-index: $zindex-drop-target;

        &:first-child {
          &::before {
            content: "";
          }
        }
      }

      &.dragging {
        background-image:
          linear-gradient(
            to right,
            $item-table-header-border-color 1px,
            $item-table-header-bg 1px
          );
        box-shadow: 1px 0 $item-table-header-border-color;

        &::before,
        &::after {
          content: "";
          position: absolute;
          top: calc(100% + 1px);
          width: 1px;
          height: 4000px;
          background: $item-table-column-border-color;
        }

        &::before {
          left: 0;
        }

        &::after {
          right: -1px;
          box-shadow: none;
        }

        // Only hide the 2nd column separator in moving state
        // when the first one is in dragging state
        &:first-child + .moving {
          &::before {
            content: none;
          }
        }
      }

      &[class*="integer"] {
        text-align: right;
      }

      .th-container {
        display: flex;
        width: 100%;
        height: 100%;
        justify-content: space-between;
        align-items: center;
        padding: 0 $space-min 0 ($space-min + 1px);

        @include variant(".metadata-head:first-child") {
          padding-left: $space-xs;
        }
      }

      .label {
        @include css-truncation;
        flex: 1 1 auto;
        padding-right: $space-min;

        @include variant(".metadata-head[class*='integer']") {
          padding-left: $space-min;
          padding-right: 0;
        }
      }

      .icon {
        color: inherit;
        margin: 0 -4px 0 -5px;

        @include state(".metadata-head.descending") {
          transform: scaleY(-1);
        }

        @include variant(".metadata-head[class*='integer']") {
          order: -1;
        }
      }
    }
  }

  .table-body {
    flex: 1 1 auto;
    position: relative;
    height: calc(100% - #{$item-table-header-height}); // Prevent vertical scrollbar due to horizontal scrollbar
    display: flex; // Prevent overflow
    contain: strict;

    &.over {
      @extend %drop-target;
    }
  }

  .scroll-container {
    background-image:
      repeating-linear-gradient(
        to bottom,
        $items-odd-bg $space-min,
        $items-odd-bg ($row-height + $space-min),
        transparent ($row-height + $space-min),
        transparent (2 * $row-height + $space-min)
      );
    background-attachment: local;
    padding-top: $space-min;
    position: relative;
    z-index: 0; // Fix stacking context (overlay toolbar covered by active item)
    height: 100%; // Prevent vertical scrollbar du to horizontal scrollbar
    overscroll-behavior: auto; // Reset to allow for horizontal scroll gestures on item-table
  }

  .runway {
    contain: strict;
    min-height: 100%; // Needs some flex row parent to work
  }

  .viewport {
    width: 100%;
    contain: content;
  }

  .item {
    display: grid;
    grid-template-columns: var(--item-template-columns);
    height: $row-height;
    contain: strict;

    &.active {
      background: $items-active-bg;
    }

    @include state(".scroll-container:focus .item.active") {
      background: $items-focus-bg;
    }

    &.over {
      @extend %drop-target;
    }

    .td {
      display: flex;
      align-items: center;

      @include state(".item.active") {
        color: $items-active-color;
      }

      @include state(".scroll-container:focus .item.active") {
        color: $items-focus-color;

        .icon-circle,
        .icon-crescentcircle {
          .border {
            color: $colors-focus-border-table;
          }
        }
      }

      &.moving {
        transform: translateX(var(--drop-offset));
      }

      &[class*="integer"] {
        text-align: right;
      }
    }

    .td-container {
      padding: 0 $space-xs 0 ($space-xs + 1px);
      transition: opacity $column-transition;

      @include state(".dragging .td-container") {
        opacity: 0.5;
        transition: none;
      }

      @include variant(".main-column:first-child .td-container") {
        padding-left: $default-padding-horizontal;
      }
    }
  }

  .editable {
    flex-shrink: 10000; // Shrink before tags
  }

  .tag-colors {
    margin-left: $space-xs;
    flex: 0 1 auto; // Shrink after editable

    .icon-circle,
    .icon-crescentcircle {
      @if $theme == "light" {
        @each $key, $val in $tag-color-shades {
          &.#{$key} {
            .color {
              color: map-get($val, "color-base");
            }

            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      } @else {
        @each $key, $val in $tag-color-shades {
          &.#{$key} {
            .color,
            .border {
              color: map-get($val, "color-dark");
            }
          }
        }
      }
    }
  }
}
