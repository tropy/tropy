//
// Editor styles
// --------------------------------------------------

@import "prosemirror-view/style/prosemirror";
@import "prosemirror-gapcursor/style/gapcursor";

* {
  box-sizing: border-box;

  &:focus {
    outline: none;
  }
}

.rtl {
  direction: rtl;
}

.horizontal {
  writing-mode: horizontal-tb;
}

.vertical-rl {
  writing-mode: vertical-rl;
  text-orientation: upright;
}

body {
  display: flex;
  margin: 0;
  overflow: auto;
  color: $text-color;
  font-family: $font-family-base;
  font-size: $editor-font-size;
  line-height: $editor-line-height;

  @if $platform == darwin {
    -webkit-font-smoothing: antialiased; // Lighter font rendering
  }
}

.placeholder {
  position: absolute;
  inset: 0;
  padding-inline: calc((100% - $editor-size) / 2);
  color: $editor-placeholder-color;
  pointer-events: none;
  direction: ltr;

  .rtl & {
    text-align: right;
  }

  .numbers & {
    padding-inline: calc(((100% - #{$editor-size}) / 2) + #{$space-xxl + $space-md}) 10%;
  }

  .numbers.rtl & {
    padding-inline: 10% calc(((100% - #{$editor-size}) / 2) + #{$space-xxl + $space-md});
  }

  .wrap & {
    inline-size: $editor-size;
    max-inline-size: $editor-max-size;
    margin-inline: auto;
    padding-inline: 0;
  }

  .numbers.wrap & {
    max-inline-size: $editor-max-size + $space-xxl + $space-md;
    padding-inline-start: $space-xxl + $space-md;
  }

  .numbers.wrap.rtl & {
    padding-inline: 10% $space-xxl + $space-md;
  }

  .horizontal & {
    padding-block: min(10vh, #{$editor-padding});
  }

  .vertical-rl & {
    padding-block: min(10vw, #{$editor-padding});
  }
}

.ProseMirror { /* stylelint-disable-line selector-class-pattern */
  flex: 1 1 auto;
  word-break: break-word; // For vertical writing mode (break-word or break-all?)
  counter-reset: line-numbers;
  padding-inline: calc((100% - $editor-size) / 2);
  white-space: nowrap;

  .numbers & {
    padding-inline: calc(((100% - #{$editor-size}) / 2) + #{$space-xxl + $space-md}) 10%;
  }

  .wrap & {
    flex: 0 1 auto;
    white-space: initial;
    inline-size: $editor-size;
    max-inline-size: $editor-max-size;
    margin-inline: auto;
    padding-inline: 0;
  }

  .numbers.wrap & {
    max-inline-size: $editor-max-size + $space-xxl + $space-md;
    padding-inline-start: $space-xxl + $space-md;
  }

  .horizontal & {
    padding-block: min(10vh, #{$editor-padding});
    min-height: 100vh;
  }

  .vertical-rl & {
    padding-block: min(10vw, #{$editor-padding});
    min-width: 100vw;
  }

  * {
    margin: 0;
  }

  ::selection {
    color: $text-selection-color;
    background-color: $text-selection-bg;
  }

  p,
  .line-break {
    &::before {
      .numbers & {
        content: counter(line-numbers);
        counter-increment: line-numbers;
        position: absolute;
        white-space: nowrap;
        text-align: right;
        color: $line-number-color;
        user-select: none;
        inline-size: $space-xxl;
      }

      .horizontal & {
        inset-inline-start: 10vw;
      }

      .vertical-rl & {
        top: 10vh;
        text-orientation: mixed;
      }

      .wrap & {
        inset-inline-start: 0;
      }
    }
  }

  a {
    text-decoration: none;
    color: $link-color;
    cursor: text;
    display: contents; // Prevent links from getting the focus

    @if $platform == darwin {
      .meta-key & {
        cursor: pointer;
      }
    }

    @else {
      .ctrl-key & {
        cursor: pointer;
      }
    }
  }

  strong {
    font-weight: bold;
  }

  em {
    font-style: italic;
  }

  blockquote {
    padding-inline-start: $blockquote-padding;
    border-inline-start: $blockquote-border solid $blockquote-border-color;
  }

  ul,
  ol {
    padding-inline-start: $editor-list-padding;
  }

  ul {
    list-style: disc;
  }

  :is(ul, ol) ul {
    list-style: circle;
  }

  :is(ul, ol) :is(ul, ol) ul {
    list-style: square;
  }

  ol {
    counter-reset: ol;

    .horizontal & {
      list-style: decimal;
    }

    .vertical-rl & {
      list-style: none;

      li {
        &::before {
          content: counter(ol) ".";
          counter-increment: ol;
          position: absolute;
          inset-inline-start: 0;
          height: $editor-list-padding;
          text-align: right;
          text-orientation: mixed;

          @include variant(".vertical-rl.numbers") {
            inset-inline-start: $space-xxl + $space-md;
          }
        }
      }
    }
  }

  li {
    display: block;
    position: static; // Allow for positioned line numbers

    p {
      display: list-item;

      &[style*="center"],
      &[style*="end"] {
        list-style-position: inside;
      }
    }
  }

  .line-break {
    .numbers & {
      &::before {
        margin-block-start: $editor-line-height-computed;
      }
    }
  }

  hr {
    border: 0;
    border-block-start: $editor-hr-border solid $editor-hr-border-color;
    margin-block: calc($editor-line-height-computed / 2 - $editor-hr-border / 2);
  }

  sup,
  sub {
    line-height: 1;
    font-size: $sup-and-sub-font-size;
  }

  &-selectednode {
    outline: $editor-outline-width solid $selected-node-color;
  }
}
