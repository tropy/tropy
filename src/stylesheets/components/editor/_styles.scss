//
// Editor styles
// --------------------------------------------------

@import "prosemirror-view/style/prosemirror";
@import "prosemirror-gapcursor/style/gapcursor";

.ProseMirror {
  font-size: $editor-font-size;
  line-height: $editor-line-height;
  word-break: break-word; // For vertical writing mode (break-word or break-all?)
  counter-reset: line-numbers;
  user-select: text;

  .no-wrap & {
    white-space: nowrap;
  }

  &:not(.ProseMirror-focused) {
    ::selection {
      background-color: $editor-pseudo-selection-bg;
    }
  }

  * {
    margin: 0;
  }

  p,
  .line-break {
    .numbers.horizontal &,
    .numbers.vertical-rl & {
      &::before {
        content: counter(line-numbers);
        counter-increment: line-numbers;
        position: absolute;
        white-space: nowrap;
        text-align: right;
        color: $line-number-color;
        user-select: none;
      }
    }

    .numbers.horizontal & {
      &::before {
        left: 0;
        width: $space-xxl;
      }
    }

    .numbers.vertical-rl & {
      &::before {
        top: 0;
        height: $space-xxl;
        text-orientation: mixed;
      }
    }
  }

  a {
    cursor: text;
    text-decoration: none;

    .darwin.meta-key &,
    .win32.ctrl-key &,
    .linux.ctrl-key & {
      cursor: pointer;

      @include state("a:hover") {
        text-decoration: underline;
      }
    }
  }

  strong {
    font-weight: bold;
  }

  em {
    font-style: italic;
  }

  blockquote {
    .horizontal & {
      padding-left: $blockquote-padding;
      border-left: $blockquote-border solid $blockquote-border-color;
    }

    .vertical-rl & {
      padding-top: $blockquote-padding;
      border-top: $blockquote-border solid $blockquote-border-color;
    }
  }

  ul,
  ol {
    .horizontal & {
      padding-left: $editor-list-padding;
    }

    .vertical-rl & {
      padding-top: $editor-list-padding;
    }
  }

  ul {
    list-style: disc;
  }

  ul ul,
  ol ul {
    list-style: circle;
  }

  ul ul ul,
  ol ul ul,
  ul ol ul,
  ol ol ul {
    list-style: square;
  }

  ol {
    counter-reset: ol;

    .horizontal & {
      list-style: decimal;
    }

    .vertical-rl & {
      list-style: none;

      li {
        &::before {
          content: counter(ol) ".";
          counter-increment: ol;
          position: absolute;
          top: 0;
          height: 49px;
          text-align: right;
          text-orientation: mixed;
        }
      }
    }
  }

  li {
    display: block;
    position: static; // Allow for positioned line numbers

    p {
      display: list-item;

      @each $alignment in center, right {
        &[style*="#{$alignment}"] {
          list-style-position: inside;
        }
      }
    }
  }

  .line-break {
    .numbers.horizontal & {
      &::before {
        margin-top: $editor-line-height-computed;
      }
    }

    .numbers.vertical-rl & {
      &::before {
        margin-right: $editor-line-height-computed;
      }
    }
  }

  hr {
    border: 0;

    .horizontal & {
      border-top: $editor-hr-border solid $editor-hr-border-color;
      margin: ($editor-line-height-computed / 2 - $editor-hr-border / 2) 0;
    }

    .vertical-rl & {
      border-right: $editor-hr-border solid $editor-hr-border-color;
      margin: 0 ($editor-line-height-computed / 2 - $editor-hr-border / 2);
    }
  }

  sup,
  sub {
    line-height: 1;
    font-size: $sup-and-sub-font-size;
  }

  &-selectednode {
    outline: $editor-outline-width solid $selected-node-color;

    @at-root li#{&} {
      outline: none;

      &::after {
        left: -$editor-list-padding - $editor-outline-width;
        border: $editor-outline-width solid $selected-node-color;
      }
    }
  }
}
